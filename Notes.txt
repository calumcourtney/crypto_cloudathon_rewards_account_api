psql "host=cloudathondb.postgres.database.azure.com port=5432 dbname=cryptocurrencydb user=cloudathon_admin password=SaladAndCheese64! sslmode=require"
"host=cloudathondb.postgres.database.azure.com port=5432 dbname=cryptocurrencydb user=cloudathon_admin password=SaladAndCheese64! sslmode=require"


https://github.com/calumcourtney/crypto_cloudathon_UI
https://github.com/calumcourtney/crypto_cloudathon_wallet_api
https://github.com/calumcourtney/crypto_cloudathon_rewards_account_api
https://github.com/calumcourtney/crypto_cloudathon_lending_api



-----------------------------------------------------------
------------------- Create Schema -------------------------
-----------------------------------------------------------

WALLET:
	CREATE TABLE users (
	   user_id char(36) PRIMARY KEY,
	   email VARCHAR ( 255 ) UNIQUE NOT NULL
	);


	CREATE TABLE crypto_connection_details (
	   connection_id char(36) PRIMARY KEY,
	   public_address VARCHAR ( 36 ) NOT NULL,
	   public_key VARCHAR ( 70 ) NOT NULL.
	   private_key VARCHAR ( 70 ) NOT NULL
	);

	CREATE TABLE wallet (
	   wallet_id char(36) PRIMARY KEY,
	   user_id char(36) NOT NULL,
	   connection_id char(36) NOT NULL,
	   FOREIGN KEY (user_id)
		  REFERENCES users (user_id),
		FOREIGN KEY (connection_id)
		  REFERENCES crypto_connection_details (connection_id)
	);

	CREATE TABLE supported_chains (
	   chain_id char(36) PRIMARY KEY,
	   name VARCHAR ( 255 ) UNIQUE NOT NULL,
	   symbol VARCHAR ( 255 ) UNIQUE NOT NULL
	);


	CREATE TABLE cypto_transactions (
	   transaction_id char(36) PRIMARY KEY,
	   wallet_id char(36) NOT NULL,
	   chain_id char(36) NOT NULL,
	   transaction_hash VARCHAR ( 255 ) UNIQUE NOT NULL,
	   date_started timestamp NOT NULL,
	   date_completed timestamp NOT NULL,
	   transaction_state VARCHAR ( 255 ) NOT NULL,
	   FOREIGN KEY (wallet_id)
		  REFERENCES wallet (wallet_id),  
	   FOREIGN KEY (chain_id)
		  REFERENCES supported_chains (chain_id)
	);


INTEREST ACCOUNT:
	CREATE TABLE interest_account_supported_coins (
	   interest_account_supported_coins_id char(36) PRIMARY KEY,
	   chain_id char(36) NOT NULL,
	   interest_rate double PRECISION NOT NULL,
	   FOREIGN KEY (chain_id)
		  REFERENCES supported_chains (chain_id)	  
	);


	CREATE TABLE interest_account (
	   interest_account_id char(36) PRIMARY KEY,
	   user_id char(36) NOT NULL,
	   interest_account_supported_coins_id char(36) NOT NULL,
	   quantity double PRECISION NOT NULL,
	   status VARCHAR ( 255 ) NOT NULL,
	   opened_date timestamp NOT NULL,
	   FOREIGN KEY (user_id)
		  REFERENCES users (user_id),
	   FOREIGN KEY (interest_account_supported_coins_id)
		  REFERENCES interest_account_supported_coins (interest_account_supported_coins_id)	  
	);
	
	CREATE TABLE interest_transactions (
	   interest_transactions_id char(36) PRIMARY KEY,
	   interest_account_id char(36) NOT NULL,
	   date timestamp NOT NULL,
	   quantity double PRECISION NOT NULL,
	   start_quantity double PRECISION NOT NULL,
	   end_quantity double PRECISION NOT NULL,
	   FOREIGN KEY (interest_account_id)
		  REFERENCES interest_account (interest_account_id)
	);
	
	
	
-----------------------------------------------------------
------------------- SQL Statements ------------------------
-----------------------------------------------------------

-- Adding supported_chains:
	INSERT INTO supported_chains(name, symbol)
	VALUES ('Bitcoin', 'BTC')
	RETURNING chain_id;
	
	select * from supported_chains
	
	
-- Adding interest_account_supported_coins:
	INSERT INTO interest_account_supported_coins(chain_id, interest_rate)
	VALUES (1, 1.01)
	RETURNING interest_account_supported_coins_id;
	
	select * from interest_account_supported_coins;
	
-- Transferring money into to interest account:
	DO $$
	DECLARE chain_id_var int;
	DECLARE user_id_var int;
	DECLARE quantity_var DOUBLE PRECISION;
	
	DECLARE interest_account_supported_coins_id_var int;
	DECLARE interest_account_id_var int;
	DECLARE updatedQuantity_var DOUBLE PRECISION;
	
	BEGIN
	  -- THE BELOW VALUES SHOULD BE PARAMETERS AND DYNAMICALLY SET	  
	  chain_id_var := 1;
	  user_id_var := 2;
	  quantity_var := 100;
	  
	  
	  -- Based on the user and the crypo currency retrieveing the ID of the interest account
	  interest_account_id_var := (select interest_account.interest_account_id from interest_account
	  INNER JOIN users ON interest_account.user_id=users.user_id
	  INNER JOIN interest_account_supported_coins ON interest_account.interest_account_supported_coins_id=interest_account_supported_coins.interest_account_supported_coins_id
	  INNER JOIN supported_chains ON interest_account_supported_coins.chain_id=supported_chains.chain_id
	  where supported_chains.chain_id = chain_id_var and users.user_id = user_id_var);
	  
	  -- If the user doesn't have a interest account for this currency. We are creating one and setting the value to the transferred coins
	  if interest_account_id_var IS NULL then
		  interest_account_supported_coins_id_var := (select interest_account_supported_coins_id from interest_account_supported_coins where chain_id = chain_id_var);
		  INSERT INTO interest_account(user_id, interest_account_supported_coins_id, quantity, status, opened_date)
		  VALUES (user_id_var, interest_account_supported_coins_id_var, quantity_var, 'OPEN', NOW())
		  RETURNING interest_account_id INTO interest_account_id_var;
		  updatedQuantity_var := quantity_var;
		  
	  -- If the user does have and interest account we are updating the value
	  else
		UPDATE interest_account SET quantity = quantity + quantity_var WHERE interest_account_id = interest_account_id_var;
		updatedQuantity_var := (select quantity from interest_account WHERE interest_account_id = interest_account_id_var);
	  end if;
	  RAISE NOTICE '>>>%<<<', updatedQuantity_var;
	  
	  -- Adding the transaction
	  insert into interest_transactions(interest_account_id, date, quantity, start_quantity, end_quantity)
	  VALUES (interest_account_id_var,NOW(),quantity_var,updatedQuantity_var - quantity_var,updatedQuantity_var);	 
	  
	END;
	$$;
	
	
	
	
	-- select * from interest_account;
	-- select * from interest_transactions;
	-- DELETE FROM interest_account WHERE interest_account_id = 2;
	-- DELETE FROM interest_transactions;
	
-- Removing from interst account:
	DO $$
	DECLARE interest_account_id_var int;
	DECLARE quantity_var DOUBLE PRECISION;
	DECLARE updatedQuantity_var DOUBLE PRECISION;
	
	BEGIN
		quantity_var := 100;
		interest_account_id_var := 12;
		UPDATE interest_account SET quantity = quantity - quantity_var WHERE interest_account_id = interest_account_id_var;
		updatedQuantity_var := (select quantity from interest_account WHERE interest_account_id = interest_account_id_var);
	    
		insert into interest_transactions(interest_account_id, date, quantity, start_quantity, end_quantity)
	    VALUES (interest_account_id_var,NOW(),quantity_var,updatedQuantity_var + quantity_var,updatedQuantity_var);
	END;
	$$;
	
-- Retrieving all accounts associated with user
select quantity, supported_chains.name, supported_chains.symbol from interest_account 
INNER JOIN interest_account_supported_coins ON interest_account.interest_account_supported_coins_id=interest_account_supported_coins.interest_account_supported_coins_id
INNER JOIN supported_chains ON interest_account_supported_coins.chain_id=supported_chains.chain_id
where user_id = 1


-- Adding interest payments
do $$
declare interest_account record;
declare interestAccountID int;
declare interestRate DOUBLE PRECISION;
declare originalQuantity DOUBLE PRECISION;
declare updatedQuantity DOUBLE PRECISION;
begin
    for interest_account in (select interest_account_id, interest_account_supported_coins_id, quantity from interest_account)
    loop 
		interestAccountID := interest_account.interest_account_id;
		interestRate := (select interest_rate from interest_account_supported_coins where interest_account_supported_coins_id=interest_account.interest_account_supported_coins_id);
		originalQuantity = interest_account.quantity;
		updatedQuantity = interest_account.quantity * interestRate;
		UPDATE interest_account SET quantity = updatedQuantity WHERE interest_account_id = interestAccountID;
		
		
		insert into interest_transactions(interest_account_id, date, quantity, start_quantity, end_quantity)
	    VALUES (interestAccountID,NOW(),updatedQuantity - originalQuantity,originalQuantity,updatedQuantity);
    end loop;
end;
$$;
